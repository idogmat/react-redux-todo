{"version":3,"sources":["components/todo-input/todo-input.jsx","components/todo-item/todo-item.jsx","components/todo-list/todo-list.jsx","components/footer/footer.jsx","containers/todo/todo.jsx","actions/actionCreator.js","constants.js","components/title/title.jsx","App.js","serviceWorker.js","reducers/tasks.js","store.js","reducers/filters.js","reducers/index.js","index.js"],"names":["ToDoInput","value","onChange","onKeyPress","onClick","className","placeholder","ToDoItem","text","isCompleted","removeTask","id","completeTask","ToDoList","tasksList","map","key","FILTERS_BTN","Footer","amount","activeFilter","changeFilter","ToDo","state","taskText","handleInputChange","target","setState","addTasks","evt","console","log","length","type","props","Date","getTime","filterTasks","tasks","filter","task","getActiveTasksCounter","this","filters","isTasksExist","filteredTasks","taskCounter","Component","connect","Title","title","App","Boolean","window","location","hostname","match","TASKS","load","namespace","preloadedState","rootReducer","combineReducers","composeEnhancers","compose","store","createStore","applyMiddleware","save","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d082e939.chunk.js","sourcesContent":["import React from 'react';\r\nimport './todo-input.css';\r\n\r\nconst ToDoInput = ({ value, onChange, onKeyPress, onClick }) => (\r\n  <div className=\"todo-input-wrapper\">\r\n      <span className=\"fas fa-plus\" onClick={onClick}>+</span>\r\n    <input\r\n      className=\"todo-input\"\r\n      placeholder=\"Click to add task\"\r\n      onChange={onChange}\r\n      value={value}\r\n      onKeyPress={onKeyPress}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default ToDoInput;\r\n","import React from 'react';\r\nimport './todo-item.css';\r\n\r\nconst ToDoItem = ({ text, isCompleted, removeTask, id, completeTask }) => (\r\n  <li className=\"todo-item\">\r\n    <span onClick={() => completeTask(id)} className={isCompleted ? 'mark far fa-check-circle' : 'mark far fa-circle'} />\r\n    <span className={isCompleted ? 'completed text' : 'text'}>{text}</span>\r\n    <span onClick={() => removeTask(id)} className=\"fas fa-times\" >+</span>\r\n  </li>\r\n);\r\nexport default ToDoItem;\r\n","import React from 'react';\r\nimport ToDoItem from '../todo-item/todo-item';\r\nimport './todo-list.css';\r\n\r\nconst ToDoList = ({ tasksList, removeTask, completeTask }) => (\r\n  <ul className=\"todo-list\">\r\n    {tasksList.map(({ id, text, isCompleted }) => (\r\n      <ToDoItem completeTask={completeTask} removeTask={removeTask} id={id} key={id} text={text} isCompleted={isCompleted} />\r\n    ))}\r\n  </ul>\r\n);\r\nexport default ToDoList;\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst FILTERS_BTN = [\r\n  {\r\n    text: 'All',\r\n    id: 'all',\r\n  },\r\n  {\r\n    text: 'Active',\r\n    id: 'active',\r\n  },\r\n  {\r\n    text: 'Completed',\r\n    id: 'completed'\r\n  }\r\n];\r\n\r\nconst Footer = ({ amount, activeFilter, changeFilter }) => (\r\n  <div className=\"footer\">\r\n    <span className=\"amount\">{`${amount} Tasks left`}</span>\r\n    <div className=\"btn-group\">\r\n      {FILTERS_BTN.map(({ text, id }) => (\r\n        <button\r\n          onClick={() => {changeFilter(id)}}\r\n          key={id}\r\n          className={id === activeFilter ? \"filter-btn active\" : 'filter-btn'}\r\n        >{text}</button>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTasks, removeTask, completeTask, changeFilter } from '../../actions/actionCreator';\r\nimport ToDoInput from '../../components/todo-input/todo-input';\r\nimport ToDoList from '../../components/todo-list/todo-list';\r\nimport Footer from '../../components/footer/footer';\r\nimport './todo.css';\r\n\r\nclass ToDo extends Component {\r\n  state = {\r\n    taskText: '',\r\n  }\r\n  handleInputChange = ({ target: { value } }) => {\r\n    this.setState({\r\n      taskText: value,\r\n    })\r\n  }\r\n  addTasks = (evt) => {\r\n    console.log(evt)\r\n    const { taskText } = this.state;\r\n    if (taskText.length > 3 && evt.type === 'click') {\r\n      const { addTasks } = this.props;\r\n      addTasks((new Date()).getTime(), taskText, false);\r\n      this.setState({\r\n        taskText: '',\r\n      });\r\n    }\r\n    if (taskText.length > 3 && evt.key === 'Enter') {\r\n      const { addTasks } = this.props;\r\n      addTasks((new Date()).getTime(), taskText, false);\r\n      this.setState({\r\n        taskText: '',\r\n      });\r\n    }\r\n  }\r\n\r\n  filterTasks = (tasks, activeFilter) => {\r\n    switch (activeFilter) {\r\n      case 'completed':\r\n        return tasks.filter(task => task.isCompleted);\r\n        break;\r\n      case 'active':\r\n        return tasks.filter(task => !task.isCompleted);\r\n        break;\r\n      default:\r\n        return tasks;\r\n    }\r\n  }\r\n\r\n  getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\r\n\r\n  render() {\r\n    const { taskText } = this.state;\r\n    const { tasks, removeTask, completeTask, filters, changeFilter } = this.props;\r\n    const isTasksExist = tasks && tasks.length > 0;\r\n    const filteredTasks = this.filterTasks(tasks, filters);\r\n    const taskCounter = this.getActiveTasksCounter(tasks);\r\n\r\n    return (\r\n      <div className=\"todo-wrapper\">\r\n        <ToDoInput onClick={this.addTasks} onKeyPress={this.addTasks} onChange={this.handleInputChange} value={taskText} />\r\n        {isTasksExist && <ToDoList completeTask={completeTask} tasksList={filteredTasks} removeTask={removeTask} />}\r\n        {isTasksExist && <Footer changeFilter={changeFilter} amount={taskCounter} activeFilter={filters} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(({ tasks, filters }) => ({\r\n  tasks,\r\n  filters,\r\n}), { addTasks, removeTask, completeTask, changeFilter })(ToDo);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//\r\n","import { ADD_TASK, REMOVE_TASK, COMPLETE_TASK, CHANGE_FILTER } from '../constants';\r\n\r\nexport const addTasks = (id, text, isCompleted) => ({\r\n  type: ADD_TASK,\r\n  id,\r\n  text,\r\n  isCompleted\r\n});\r\n\r\nexport const removeTask = id => ({\r\n  type: REMOVE_TASK,\r\n  id\r\n});\r\n\r\nexport const completeTask = id => ({\r\n  type: COMPLETE_TASK,\r\n  id\r\n});\r\n\r\nexport const changeFilter = activeFilter => ({\r\n  type: CHANGE_FILTER,\r\n  activeFilter,\r\n})\r\n","export const ADD_TASK = 'ADD_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\nexport const CHANGE_FILTER = 'CHANGE_FILTER';\r\n","import React from 'react';\r\nimport './title.css';\r\n\r\nconst Title = ({ title }) => (\r\n  <h1 className=\"title\">{title}</h1>\r\n);\r\nexport default Title;\r\n","import React, { Fragment } from 'react';\r\n\r\nimport ToDo from './containers/todo/todo';\r\nimport Title from './components/title/title';\r\n\r\nconst App = () => (\r\n  <Fragment>\r\n    <Title title=\"ToDo App\" />\r\n    <ToDo />\r\n  </Fragment>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ADD_TASK, REMOVE_TASK, COMPLETE_TASK } from '../constants';\r\nimport { load } from 'redux-localstorage-simple';\r\n\r\nlet TASKS = load({ namespace: 'todo-list' });\r\n\r\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\r\n  TASKS = {\r\n    tasks: [],\r\n  }\r\n}\r\nconst tasks = (state = TASKS.tasks, { id, text, isCompleted, type }) => {\r\n  switch (type) {\r\n    case ADD_TASK :\r\n      return [\r\n        ...state, {\r\n          id,\r\n          text,\r\n          isCompleted,\r\n        }\r\n      ];\r\n    case REMOVE_TASK:\r\n        return [...state].filter(task => task.id !== id);\r\n      case COMPLETE_TASK:\r\n          return [...state].map(task => {\r\n            if(task.id === id) {\r\n              task.isCompleted = !task.isCompleted;\r\n            }\r\n            return task;\r\n          });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default tasks;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport { save } from 'redux-localstorage-simple'\r\n\r\n/* eslint-disable no-underscore-dangle */\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\r\n/* eslint-enable */\r\n\r\nconst configureStore = preloadedState => (\r\n  createStore(\r\n    rootReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(save({ namespace: 'todo-list' }))\r\n    ),\r\n  )\r\n);\r\n\r\nconst store = configureStore({});\r\n\r\nexport default store;\r\n","import { CHANGE_FILTER } from '../constants';\r\n\r\nconst BASE_FILTER = 'all';\r\n\r\nconst filter = (state = BASE_FILTER, { type, activeFilter }) => {\r\n  switch (type) {\r\n    case CHANGE_FILTER:\r\n      return activeFilter;\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default filter;\r\n","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport filters from './filters';\r\n\r\nconst rootReducer = combineReducers({ tasks, filters });\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App.js';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render((\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n), document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}